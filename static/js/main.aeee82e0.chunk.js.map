{"version":3,"sources":["images/kimetsu.jpg","images/blackklover.png","images/hagaren2.jpg","images/mahouka2.jpg","images/sao2.jpg","images/tensura2.jpg","logo.svg","component/navbar.jsx","component/animelistpage.jsx","component/mainpage.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navigation","Navbar","collapseOnSelect","expand","bg","variant","Brand","href","style","fontSize","src","LOGO","width","height","alt","Toggle","aria-controls","Collapse","id","Nav","className","Link","Component","useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","tileData","img","kimetsu","title","author","blackklover","hagaren","mahouka","sao","tenseisitarasuraimu","TitlebarGridList","classes","GridList","cellHeight","map","tile","GridListTile","key","GridListTileBar","subtitle","Main","Left","Title","Tagu","to","Search","placeholder","type","name","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.aeee82e0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/kimetsu.5d697f97.jpg\";","module.exports = __webpack_public_path__ + \"static/media/blackklover.65bf74ab.png\";","module.exports = __webpack_public_path__ + \"static/media/hagaren2.ea368bda.jpg\";","module.exports = __webpack_public_path__ + \"static/media/mahouka2.3371ad56.jpg\";","module.exports = __webpack_public_path__ + \"static/media/sao2.d99b46b4.jpg\";","module.exports = __webpack_public_path__ + \"static/media/tensura2.b2beaac9.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\r\nimport { Navbar, Nav } from 'react-bootstrap';\r\nimport LOGO from '../logo.svg';\r\n\r\nclass Navigation extends Component {\r\n    render() {\r\n        return (\r\n            <Navbar collapseOnSelect expand=\"lg\" bg=\"dark\" variant=\"dark\">\r\n                <Navbar.Brand href=\"#home\" style={{fontSize: \"2.0em\"}}  >\r\n                    <img\r\n                        src={LOGO}\r\n                        width=\"30\"\r\n                        height=\"60\"\r\n                        alt=\"React Bootstrap logo\"\r\n\r\n                    />\r\n                    Battle\r\n                </Navbar.Brand>\r\n                <Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n                <Navbar.Collapse id=\"responsive-navbar-nav\" >\r\n                    <Nav className=\"mr-auto\"style={{fontSize: \"2.0em\"}} >\r\n                        <Nav.Link href=\"#home\">Home</Nav.Link>\r\n                        <Nav.Link href=\"#romantic\">Romantic</Nav.Link>\r\n                        <Nav.Link href=\"#school\">School Life</Nav.Link>\r\n                        <Nav.Link href=\"#robot\">Robot</Nav.Link>\r\n                        <Nav.Link href=\"#term\">This term</Nav.Link>\r\n                        <Nav.Link href=\"#favorite\">My favorite</Nav.Link>\r\n                        \r\n                    </Nav>\r\n                </Navbar.Collapse>\r\n            </Navbar >\r\n        );\r\n    }\r\n}\r\nexport default Navigation;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport kimetsu from '../images/kimetsu.jpg';\r\nimport blackklover from '../images/blackklover.png';\r\nimport hagaren from '../images/hagaren2.jpg';\r\nimport mahouka from '../images/mahouka2.jpg';\r\nimport sao from '../images/sao2.jpg';\r\nimport tenseisitarasuraimu from '../images/tensura2.jpg';\r\nimport Navigation from './navbar';\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n    flexWrap: 'wrap',\r\n    justifyContent: 'space-around',\r\n    overflow: 'hidden',\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n  gridList: {\r\n    width: '75%',\r\n    height: '75%',\r\n  },\r\n  \r\n}));\r\n\r\nconst tileData = [\r\n    {\r\n        img: kimetsu,\r\n        title: '鬼滅の刃',\r\n        author: 'author'\r\n    },\r\n    {\r\n        img: blackklover,\r\n        title: 'ブラッククローバー',\r\n        author: 'author'\r\n    },\r\n    {\r\n        img: hagaren,\r\n        title: '鋼の錬金術師 FULLMETAL ALCHEMIST',\r\n        author: 'author'\r\n    },\r\n    {\r\n        img: mahouka,\r\n        title: '魔法科高校の劣等生',\r\n        author: 'author'\r\n    },\r\n    {\r\n        img: sao,\r\n        title: 'ソードアートオンライン',\r\n        author: 'author'\r\n    },\r\n    {\r\n        img: tenseisitarasuraimu,\r\n        title: '転生したらスライムだった件',\r\n        author: 'author'\r\n    },\r\n]\r\n\r\n\r\n/**\r\n * The example data is structured as follows:\r\n *\r\n * import image from 'path/to/image.jpg';\r\n * [etc...]\r\n *\r\n * const tileData = [\r\n *   {\r\n *     img: image,\r\n *     title: 'Image',\r\n *     author: 'author',\r\n *   },\r\n *   {\r\n *     [etc...]\r\n *   },\r\n * ];\r\n */\r\nexport default function TitlebarGridList() {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n      <div className=\"main\" >\r\n        <Navigation/> \r\n        <div className={classes.root} style={{backgroundColor: \"#2d434e\" }}>\r\n            <GridList cellHeight={500} className={classes.gridList} >\r\n            \r\n                {tileData.map((tile) => (\r\n                <GridListTile key={tile.img}>\r\n                    <img src={tile.img} alt={tile.title} style={{width: \"100%\", height: \"auto\"}} />\r\n                    <GridListTileBar\r\n                    title={tile.title}\r\n                    subtitle={<span>by: {tile.author}</span>}/>\r\n                </GridListTile>\r\n                ))}\r\n            </GridList>\r\n        </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from 'react';\r\nimport {BrowserRouter, Route, Link, Router} from 'react-router-dom';\r\n\r\nimport '../App.css';\r\n\r\n\r\n\r\n\r\n\r\nclass Main extends Component {\r\n\r\n \r\n\r\n\r\n\r\n  render(){   \r\n    return (\r\n      <div className=\"App\">\r\n        <BrowserRouter>\r\n        <Left />\r\n        <Title />\r\n        </BrowserRouter>\r\n      \r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n/*const App = () => (\r\n  <BrowserRouter >\r\n    <div>\r\n      <switch>\r\n\r\n\r\n      <Route exact path=\"/\" component={Home} />\r\n      <Route  path=\"/battle\" component={Battle} />\r\n      </switch>\r\n    </div>\r\n  </BrowserRouter>\r\n)*/\r\n\r\nconst Home = () => (\r\n  \r\n  <div className=\"App\">\r\n      \r\n        <Left />\r\n        <Title />\r\n      \r\n      \r\n  </div>\r\n\r\n\r\n)\r\n/*const Left = () => {\r\n  return(\r\n    <div className=\"left\">\r\n      <div className=\"image\">\r\n        <Component1 />\r\n      </div>\r\n      \r\n    </div>\r\n  )\r\n}*/\r\n\r\nconst Left = () => {\r\n  return(\r\n    <div className=\"left\">\r\n      \r\n     \r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nconst Title = () => {\r\n  return(\r\n    <div className=\"title1\">\r\n      <h1>Anime researcher</h1>\r\n      <Search />\r\n      <Tagu />\r\n      \r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\nconst Tagu = () => {\r\n  let items = [\r\n    {\"name\": \"Battle\"},\r\n    {\"name\": \"Romantic\"},\r\n    {\"name\": \"School Life\"},\r\n    {\"name\": \"Robot\"},\r\n    {\"name\": \"This term\"},\r\n    {\"name\": \"My favorite\"}\r\n  ]\r\n      return(\r\n        <div className=\"tagu\">\r\n         \r\n          {/*<BrowserRouter>\r\n          <div className=\"list\">\r\n            <Link to=\"/battle\">Battle</Link>\r\n            <Route  path=\"/battle\" component={Battle} />\r\n            \r\n            \r\n            \r\n          </div>\r\n          </BrowserRouter>*/}\r\n          \r\n            <Link to = \"/gridlist\">\r\n              <button >Battle</button>\r\n            </Link>\r\n            \r\n          \r\n          \r\n          <div className=\"list\">\r\n            Romantic\r\n          </div>\r\n          <div className=\"list\">\r\n            School Life\r\n          </div>\r\n          <div className=\"list\">\r\n            Robot\r\n          </div>\r\n          <div className=\"list\">\r\n            This term\r\n          </div>\r\n          <div className=\"list\">\r\n            My favorite\r\n          </div>\r\n         \r\n        </div>\r\n      )\r\n   /* return(\r\n      <div className=\"tagu\">\r\n        <button>Battle</button>\r\n      </div>\r\n    )*/\r\n /* return(\r\n    <div className=\"tagu\">\r\n      <BrowserRouter>\r\n        <ul>\r\n          <li><Link to='/battle'>Battle</Link></li>\r\n          <li><Link to='/romantic'>Romantic</Link></li>\r\n          <li><Link to='/school Life'>School Life</Link></li>\r\n          <li><Link to='/robot'>Robot</Link></li>\r\n          <li><Link to='/this term'>This term</Link></li>\r\n          <li><Link to='/my favorite'>My favorite</Link></li>\r\n        </ul>\r\n        \r\n\r\n      </BrowserRouter>\r\n    </div>\r\n  )*/\r\n}\r\n\r\nconst Search = () => {\r\n  return(\r\n    <div className=\"search-bar\">\r\n      <input id=\"search-input\" placeholder=\"please enter the keyword...\" \r\n      type=\"text\" name=\"search-key\" />\r\n      \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\n\r\nexport default Main;\r\n","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Link, Router} from 'react-router-dom';\n\nimport './App.css';\nimport TitlebarGridList from './component/animelistpage.jsx';\nimport Main from './component/mainpage.jsx';\n\n\n\n\nclass App extends Component {\n\n \n\n\n\n  /*render(){   \n    return (\n      <div className=\"App\">\n        <BrowserRouter>\n\n        <Left />\n        <Title />\n        </BrowserRouter>\n      \n      </div>\n    );\n  }*/\n\n    render(){\n      return(\n        <BrowserRouter>\n           \n\n\n            <Route  exact path=\"/\" component={Main} />\n            <Route  path=\"/gridlist\" component={TitlebarGridList} />\n          \n        </BrowserRouter>\n      )\n    }\n}\n\n/*const App = () => (\n  <BrowserRouter >\n    <div>\n      <switch>\n\n\n      <Route exact path=\"/\" component={Home} />\n      <Route  path=\"/battle\" component={Battle} />\n      </switch>\n    </div>\n  </BrowserRouter>\n)*/\n\nconst Home = () => (\n  \n  <div className=\"App\">\n      \n        <Left />\n        <Title />\n      \n      \n  </div>\n\n\n)\n/*const Left = () => {\n  return(\n    <div className=\"left\">\n      <div className=\"image\">\n        <Component1 />\n      </div>\n      \n    </div>\n  )\n}*/\n\nconst Left = () => {\n  return(\n    <div className=\"left\">\n      \n     \n      \n    </div>\n  )\n}\n\nconst Title = () => {\n  return(\n    <div className=\"title1\">\n      <h1>Anime researcher</h1>\n      <Search />\n      <Tagu />\n      \n      \n    </div>\n  )\n}\n\nconst Tagu = () => {\n  let items = [\n    {\"name\": \"Battle\"},\n    {\"name\": \"Romantic\"},\n    {\"name\": \"School Life\"},\n    {\"name\": \"Robot\"},\n    {\"name\": \"This term\"},\n    {\"name\": \"My favorite\"}\n  ]\n      return(\n        <div className=\"tagu\">\n         \n          {/*<BrowserRouter>\n          <div className=\"list\">\n            <Link to=\"/battle\">Battle</Link>\n            <Route  path=\"/battle\" component={Battle} />\n            \n            \n            \n          </div>\n          </BrowserRouter>*/}\n          \n            <Link to = \"/animelistpage\">\n              <button >Battle</button>\n            </Link>\n            <Route path=\"/animelistpage\" component={TitlebarGridList}/>\n          \n          \n          <div className=\"list\">\n            Romantic\n          </div>\n          <div className=\"list\">\n            School Life\n          </div>\n          <div className=\"list\">\n            Robot\n          </div>\n          <div className=\"list\">\n            This term\n          </div>\n          <div className=\"list\">\n            My favorite\n          </div>\n         \n        </div>\n      )\n   /* return(\n      <div className=\"tagu\">\n        <button>Battle</button>\n      </div>\n    )*/\n /* return(\n    <div className=\"tagu\">\n      <BrowserRouter>\n        <ul>\n          <li><Link to='/battle'>Battle</Link></li>\n          <li><Link to='/romantic'>Romantic</Link></li>\n          <li><Link to='/school Life'>School Life</Link></li>\n          <li><Link to='/robot'>Robot</Link></li>\n          <li><Link to='/this term'>This term</Link></li>\n          <li><Link to='/my favorite'>My favorite</Link></li>\n        </ul>\n        \n\n      </BrowserRouter>\n    </div>\n  )*/\n}\n\nconst Search = () => {\n  return(\n    <div className=\"search-bar\">\n      <input id=\"search-input\" placeholder=\"please enter the keyword...\" \n      type=\"text\" name=\"search-key\" />\n      \n    </div>\n  )\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}